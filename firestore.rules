rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Conversations Collection:
    // Users can read, update, and delete their own conversations.
    // Users can create new conversations for themselves.
    match /conversations/{conversationId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Messages Sub-collection:
      // Users can read and create messages within their own conversations.
      // Users can update their own messages (e.g., for editing, or server-side updates like marking 'seen').
      // Deletion of individual messages might be restricted or allowed based on ownership.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid;
        // Allow update if the user is the sender (for user edits) OR if it's an agent updating its own message (requires sender field on agent messages)
        // For simplicity now, allow update if user owns the conversation. More granular control can be added.
        allow update: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid;
        // Allow delete if user is the sender of the message.
        // Note: `resource.data.sender` should store the user's UID for messages sent by the user.
        // For messages sent by an AI, the sender field might be different (e.g., 'ai', 'agentId').
        // This rule currently allows users to delete messages they sent, within their own conversations.
        allow delete: if request.auth != null && 
                      get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid &&
                      resource.data.sender == request.auth.uid; 
      }
    }

    // Agents Collection (for Phase 3):
    // Users can read, create, update, and delete their own agents.
    match /agents/{agentId} {
      // For 'create': ensure the incoming resource has the userId set to the auth.uid.
      // For 'read, update, delete': ensure the existing resource's userId matches auth.uid.
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}
