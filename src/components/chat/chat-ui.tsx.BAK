import React, { useState, useEffect, useRef } from 'react';
import { ChatMessage } from './ChatMessage';
import { ConversationSidebar } from './ConversationSidebar';
import * as cs from '@/lib/conversationStorage';
import { Conversation, Message } from '@/types/chat';
import { sendMessageToAI } from '@/lib/adk'; 
import { Modal } from '@/components/ui/Modal';
import { Button } from '@/components/ui/button';
import { PlusIcon, Mic, PaperclipIcon, SendIcon, Menu as MenuIcon, ImageIcon } from 'lucide-react';

// Custom components for the Gemini-style UI
const FeatureButton = ({ icon, label }: { icon: React.ReactNode; label: string }) => (
  <button type="button" className="flex flex-col items-center gap-1 p-2 hover:bg-gray-700 rounded-lg transition-colors cursor-pointer">
    <div className="p-2 bg-gray-700 rounded-full">{icon}</div>
    <span className="text-xs text-gray-300">{label}</span>
  </button>
);

function ChatUI() {
  // New state variables
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const toggleSidebar = () => setSidebarOpen(!sidebarOpen);
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [activeConversationId, setActiveConversationId] = useState<string | null>(null);
  const [currentMessages, setCurrentMessages] = useState<Message[]>([]);
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [conversationToDelete, setConversationToDelete] = useState<Conversation | null>(null);
  
  // Existing state variables that are still relevant
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false); 
  const formRef = React.useRef<HTMLFormElement>(null);
  const textareaRef = React.useRef<HTMLTextAreaElement>(null);

  // Initial load effect
  useEffect(() => {
    const loadedConversations = cs.getAllConversations();
    if (loadedConversations.length > 0) {
      setConversations(loadedConversations);
      setActiveConversationId(loadedConversations[0].id);
      // Messages will be set by the next effect
    } else {
      const newConv = cs.createNewConversation("First Chat");
      setConversations([newConv]);
      setActiveConversationId(newConv.id);
      setCurrentMessages([]); // New chat starts with no messages
    }
  }, []);

  // Effect to update currentMessages when activeConversationId or conversations change
  useEffect(() => {
    if (activeConversationId) {
      const activeConv = conversations.find(conv => conv.id === activeConversationId);
      setCurrentMessages(activeConv ? activeConv.messages : []);
    } else {
      setCurrentMessages([]);
    }
  }, [activeConversationId, conversations]);

  const handleSelectConversation = (id: string) => {
    setActiveConversationId(id);
  };

  const handleNewConversation = () => {
    const newConv = cs.createNewConversation(`Chat ${conversations.length + 1}`);
    setConversations(prev => [newConv, ...prev]); // Add to the beginning for newest first
    setActiveConversationId(newConv.id);
    // currentMessages will be updated by the effect
  };

  const handleRenameConversation = (id: string, newTitle: string) => {
    const updatedConv = cs.renameConversationInStorage(id, newTitle);
    if (updatedConv) {
      setConversations(prev => prev.map(c => c.id === id ? updatedConv : c));
    }
    console.log("Rename conv:", id, newTitle); // Placeholder
  };

  const handleDeleteConversation = (id: string) => {
    const updatedConversations = cs.deleteConversationFromStorage(id);
    setConversations(updatedConversations);
    if (activeConversationId === id) {
      setActiveConversationId(updatedConversations.length > 0 ? updatedConversations[0].id : null);
    }
    console.log("Delete conv:", id); // Placeholder
  };

  const promptDeleteConversation = (conversation: Conversation) => {
    setConversationToDelete(conversation);
    setShowDeleteModal(true);
  };

  const handleConfirmDelete = () => {
    if (conversationToDelete) {
      handleDeleteConversation(conversationToDelete.id); // This already updates state and storage
      setConversationToDelete(null);
      setShowDeleteModal(false);
    }
  };


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim() || !activeConversationId) return;

    const userMessage: Message = {
      id: `msg-${Date.now()}`,
      isUser: true,
      content: inputValue,
      timestamp: new Date(),
      isError: false,
    };

    // Update UI immediately
    setCurrentMessages(prev => [...prev, userMessage]);
    // Persist and update conversations state
    let updatedConv = cs.addMessageToConversation(activeConversationId, userMessage);
    if (updatedConv) {
      setConversations(prevConvs => prevConvs.map(c => c.id === activeConversationId ? updatedConv! : c));
    }
    
    const currentInputValue = inputValue;
    setInputValue('');
    setIsLoading(true);

    // AI Response part
    const aiPlaceholderMessage: Message = {
      id: `msg-${Date.now() + 1}`,
      isUser: false,
      content: '',
      timestamp: new Date(),
      isError: false,
    };
    setCurrentMessages(prev => [...prev, aiPlaceholderMessage]);
    updatedConv = cs.addMessageToConversation(activeConversationId, aiPlaceholderMessage);
    if (updatedConv) {
        setConversations(prevConvs => prevConvs.map(c => c.id === activeConversationId ? updatedConv! : c));
    }


    try {
      await sendMessageToAI(currentInputValue, (chunk) => {
        setCurrentMessages(prevMsgs => {
          const newMsgs = [...prevMsgs];
          const lastMsgIndex = newMsgs.length - 1;
          if (lastMsgIndex >= 0 && !newMsgs[lastMsgIndex].isUser) {
            newMsgs[lastMsgIndex].content += chunk;
            newMsgs[lastMsgIndex].timestamp = new Date(); // Update timestamp during streaming
          }
          return newMsgs;
        });
        // Persist streaming chunk to storage
        const convAfterStreamChunk = cs.updateLastMessageInConversation(activeConversationId, chunk);
         if (convAfterStreamChunk) {
            setConversations(prevConvs => prevConvs.map(c => c.id === activeConversationId ? convAfterStreamChunk : c));
        }
      });
    } catch (error) {
      console.error("Error sending message to AI:", error);
      const errorContent = "⚠️ Sorry, an error occurred. Please try again.";
      setCurrentMessages(prevMsgs => {
        const newMsgs = [...prevMsgs];
        const lastMsgIndex = newMsgs.length - 1;
        if (lastMsgIndex >= 0 && !newMsgs[lastMsgIndex].isUser) {
          newMsgs[lastMsgIndex].content = errorContent;
          newMsgs[lastMsgIndex].isError = true;
          newMsgs[lastMsgIndex].timestamp = new Date();
        }
        return newMsgs;
      });
       const convAfterError = cs.updateLastMessageInConversation(activeConversationId, errorContent, true);
        if (convAfterError) {
            setConversations(prevConvs => prevConvs.map(c => c.id === activeConversationId ? convAfterError : c));
        }
    } finally {
      setIsLoading(false);
      // Attempt automatic titling
      if (activeConversationId) {
        const activeConv = conversations.find(c => c.id === activeConversationId);
        // Ensure there are at least two messages (user query + AI response)
        // and the title is one of the default patterns.
        if (activeConv && 
            (activeConv.title === "First Chat" || activeConv.title.startsWith("Chat ")) && 
            currentMessages.length >= 2) { // Check based on currentMessages for the active chat
          
          let potentialTitleSource = "";
          // Prefer user's first message in the current conversation for the title
          const firstUserMessageInCurrentChat = currentMessages.find(m => m.isUser);
          // Fallback to the first successful AI message in the current conversation
          const firstAiMessageInCurrentChat = currentMessages.find(m => !m.isUser && !m.isError);

          if (firstUserMessageInCurrentChat && firstUserMessageInCurrentChat.content.trim()) {
            potentialTitleSource = firstUserMessageInCurrentChat.content;
          } else if (firstAiMessageInCurrentChat && firstAiMessageInCurrentChat.content.trim()) {
            potentialTitleSource = firstAiMessageInCurrentChat.content;
          }
          
          if (potentialTitleSource) {
            // Simple Markdown removal for title generation
            const plainTextTitle = potentialTitleSource
              .replace(/```[\s\S]*?```/g, '') // Remove code blocks
              .replace(/[`*#[\]()>!-]/g, '')   // Remove common markdown characters (simple approach)
              .replace(/(\r\n|\n|\r)/gm, " ")    // Replace newlines with spaces
              .replace(/\s+/g, ' ')           // Normalize multiple spaces to one
              .trim();

            if (plainTextTitle) {
                const generatedTitle = plainTextTitle.split(/\s+/).slice(0, 7).join(" ").substring(0, 50);
                // Check if a meaningful title was generated and it's different from the current one
                if (generatedTitle.trim() && generatedTitle.trim() !== activeConv.title) { 
                    handleRenameConversation(activeConversationId, generatedTitle.trim());
                }
            }
          }
        }
      }
    }
  };

  const handleKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      // Trigger form submission
      if (formRef.current) {
        // Check if submit button is part of the form, otherwise create and dispatch event
        const submitButton = formRef.current.querySelector('button[type="submit"]');
        if (submitButton instanceof HTMLElement) {
          submitButton.click(); // More reliable for triggering React's submit handling
        } else {
          // Fallback if specific submit button isn't found or needed
          formRef.current.requestSubmit();
        }
      }
    }
  };
  
  const handleClearInput = () => {
    setInputValue('');
  };

  // Test Markdown Strings
  const testMarkdownBasic = `
# Heading 1
## Heading 2
This is **bold text**, *italic text*, and \`inline code\`.
- Unordered List Item 1
- Unordered List Item 2
1. Ordered List Item 1
2. Ordered List Item 2
[A link to Google](https://www.google.com)
> A blockquote
`;
  const testMarkdownJSCode = `
\`\`\`javascript
function greet(name) {
  console.log(\`Hello, \${name}!\`);
}
greet('World');
\`\`\`
`;
  const testMarkdownPythonCode = `
\`\`\`python
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))
\`\`\`
`;
  const testMarkdownMixed = `
This is a paragraph with some \`inline_code\`.
Followed by a code block:
\`\`\`typescript
interface User {
  id: number;
  name: string;
}
const user: User = { id: 1, name: "Test User" };
console.log(user);
\`\`\`
And then a list:
- Item A
- Item B
`;
  const testXssAttempt = `
This is an XSS attempt:
<img src="x" onerror="alert('XSS Attempted!')" />
\`\`\`html
<p>Even in a code block, this should be sanitized or properly displayed as code:</p>
<img src="x" onerror="alert('XSS in code block!')" />
\`\`\`
[A malicious link](javascript:alert('XSS Link!'))
`;

  const addTestMessage = (content: string, isError: boolean = false) => {
    // This function bypasses the normal flow and might not trigger auto-titling
    // as it directly adds an AI message. For testing auto-titling, use the UI.
    if (activeConversationId) {
        const testAiMessage: Message = {
            id: `msg-test-${Date.now()}`,
            isUser: false,
            content: content,
            timestamp: new Date(),
            isError: isError,
        };
        setCurrentMessages(prev => [...prev, testAiMessage]); // Update current messages for UI
        const updatedConv = cs.addMessageToConversation(activeConversationId, testAiMessage); // Persist
        if (updatedConv) {
            setConversations(prevConvs => prevConvs.map(c => c.id === activeConversationId ? updatedConv : c));
        }
    } else {
        console.warn("No active conversation to add test message to. Create or select a conversation first.");
        // Optionally, create a new conversation for this test message
        const newConvForTest = cs.createNewConversation("Test Message Holder");
        setConversations(prev => [newConvForTest, ...prev]);
        setActiveConversationId(newConvForTest.id);
        // Now add the message (though this will be an AI message in an empty chat)
         const testAiMessage: Message = {
            id: `msg-test-${Date.now()}`,
            isUser: false,
            content: content,
            timestamp: new Date(),
            isError: isError,
        };
        setCurrentMessages([testAiMessage]); // Set as the only message
        const updatedConvForTest = cs.addMessageToConversation(newConvForTest.id, testAiMessage);
         if (updatedConvForTest) {
            setConversations(prevConvs => prevConvs.map(c => c.id === newConvForTest.id ? updatedConvForTest : c));
        }
    }
  };


  // Definir estilos em linha para auto-resize-textarea
  const textareaStyles = `
    .auto-resize-textarea {
      min-height: 44px; /* Equivalent to py-3 + line-height */
      max-height: 200px; /* Limit max height */
      overflow-y: auto; /* Add scrollbar when max-height is reached */
    }
  `;

  return (
    <div className="flex h-screen bg-slate-100 text-slate-800">
      <style dangerouslySetInnerHTML={{ __html: textareaStyles }} />
      
      {/* Sidebar with all conversations */}
      {isSidebarOpen && (
        <div className="w-72 border-r border-slate-200 overflow-hidden flex flex-col">
          <div className="p-4 border-b border-slate-200 flex items-center justify-between">
            <h1 className="text-xl font-semibold">Conversas</h1>
            <Button 
              variant="ghost" 
              size="icon" 
              className="rounded-full hover:bg-gray-700" 
              onClick={handleNewConversation}
            >
              <PlusIcon className="h-5 w-5" />
            </Button>
          </div>
          <ConversationSidebar
            conversations={conversations}
            activeConversationId={activeConversationId}
            onSelectConversation={handleSelectConversation}
            onNewConversation={handleNewConversation}
            onRenameConversation={handleRenameConversation}
            onDeleteConversation={promptDeleteConversation}
            isOpen={sidebarOpen}
            onToggleSidebar={toggleSidebar}
          />
        </div>
      )}
      {/* Main chat area */}
      <div className="flex flex-col flex-1 overflow-hidden">
        {/* Header - Gemini style */}
        <header className="flex items-center justify-between p-3 px-6 border-b border-slate-200 bg-white shadow-sm">
  <div className="flex items-center gap-3">
    <div className="bg-gradient-to-br from-blue-500 to-purple-500 rounded-full p-2">
      <ImageIcon className="h-6 w-6 text-white" />
    </div>
    <span className="text-lg font-bold text-slate-700 tracking-tight">Assistente Geral <span className="font-normal text-sm text-blue-300 ml-1">(Gem)</span></span>
  </div>
  <div className="flex items-center gap-2">
    <button className="p-2 rounded-full hover:bg-gray-700 transition-colors" aria-label="Tema">
      <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-300"><circle cx="10" cy="10" r="8" /><path d="M10 2v2m0 12v2m8-8h-2M4 10H2m13.66 5.66l-1.41-1.41M6.34 6.34L4.93 4.93m10.73 0l-1.41 1.41M6.34 13.66l-1.41 1.41" /></svg>
    </button>
    <button className="p-2 rounded-full hover:bg-gray-700 transition-colors" aria-label="Configurações">
      <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-300"><circle cx="12" cy="12" r="3" /><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1-2.83 2.83l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-4 0v-.09a1.65 1.65 0 0 0-1-1.51 1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 1 1-2.83-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1 0-4h.09a1.65 1.65 0 0 0 1.51-1 1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 1 1 2.83-2.83l.06.06a1.65 1.65 0 0 0 1.82.33h.09A1.65 1.65 0 0 0 9 3.09V3a2 2 0 0 1 4 0v.09a1.65 1.65 0 0 0 1 1.51h.09a1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 1 1 2.83 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82v.09c.2.63.76 1.09 1.51 1.09H21a2 2 0 0 1 0 4h-.09a1.65 1.65 0 0 0-1.51 1z" /></svg>
    </button>
  </div>
</header>
        {/* Messages area with centered welcome message when empty */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4" style={{ scrollBehavior: 'smooth' }}>
          {currentMessages.length === 0 && (
            <div className="flex flex-col items-center justify-center h-full text-center">
              <h2 className="text-2xl font-light mb-6">Olá! Como posso ajudar você hoje?</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 max-w-md">
                <div className="bg-gray-800 p-3 rounded-lg hover:bg-gray-700 cursor-pointer transition-colors">
                  <h3 className="font-medium mb-1">Criar um agente</h3>
                  <p className="text-sm text-gray-400">Monte um agente com ferramentas específicas</p>
                </div>
                <div className="bg-gray-800 p-3 rounded-lg hover:bg-gray-700 cursor-pointer transition-colors">
                  <h3 className="font-medium mb-1">Fazer uma pergunta</h3>
                  <p className="text-sm text-gray-400">Tire dúvidas sobre o sistema</p>
                </div>
              </div>
            </div>
          )}
          {currentMessages.map((message) => (
            <ChatMessage
              key={message.id}
              isUser={message.isUser}
              content={message.content}
              timestamp={message.timestamp}
              isLoading={!message.isUser && !message.content && isLoading && message.id === currentMessages[currentMessages.length -1]?.id }
              isError={message.isError}
            />
          ))}
        </div>
        {/* Input area - Gemini style */}
        <div className="bg-white p-4 border-t border-slate-200">
          <form ref={formRef} onSubmit={handleSubmit} className="relative flex items-start gap-3">
            {/* Feature buttons (like Gemini's image, mic) - can be styled or replaced */}
            <div className="flex items-center gap-1 pt-2">
              <button
                type="button"
                onClick={() => console.log('Image upload button clicked')} // Assuming you have or will have this
                className="p-2 text-slate-500 hover:text-blue-600 rounded-full hover:bg-slate-200"
                aria-label="Upload image"
              >
                <PaperclipIcon className="h-5 w-5" />
              </button>
              <button
                type="button"
                onClick={() => console.log('Voice input button clicked')} // Assuming you have or will have this
                className="p-2 text-slate-500 hover:text-blue-600 rounded-full hover:bg-slate-200"
                aria-label="Use voice"
              >
                <Mic className="h-5 w-5" />
              </button>
            </div>

            <textarea
              ref={textareaRef}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Escreva sua mensagem..."
              className="flex-1 p-3 pr-20 bg-slate-100 border border-slate-300 rounded-xl shadow-sm resize-none overflow-hidden text-slate-800 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 auto-resize-textarea"
              rows={1}
              disabled={isLoading}
            />
            <div className="absolute right-3 bottom-2 flex items-center">
              {/* Send button or loading indicator */}
              {isLoading ? (
                <div className="p-2">
                  <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-blue-500"></div>
                </div>
              ) : inputValue.trim() ? (
                <button
                  type="submit"
                  className="p-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <SendIcon className="h-5 w-5" />
                </button>
              ) : (
                <button
                  type="button"
                  disabled={isLoading}
                  className="p-2 text-slate-400 hover:text-slate-500 rounded-full hover:bg-slate-200 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <SendIcon className="h-5 w-5" />
                </button>
              )}
            </div>
            {/* Clear input button */}
            {inputValue && !isLoading && (
              <button
                type="button"
                onClick={handleClearInput}
                className="absolute right-14 bottom-3 text-slate-400 hover:text-slate-600 p-1 rounded-full hover:bg-slate-200"
                aria-label="Clear input"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            )}
          </form>
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      <Modal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        title="Delete Conversation"
        footerContent={
          <>
            <button
              onClick={() => setShowDeleteModal(false)}
              className="px-4 py-2 text-sm font-medium text-gray-300 bg-gray-600 rounded-md hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-500"
            >
              Cancel
            </button>
            <button
              onClick={handleConfirmDelete}
              className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
            >
              Delete
            </button>
          </>
        }
      >
        <p>Are you sure you want to delete the chat titled: <br />
          <strong className="font-semibold break-all">"{conversationToDelete?.title}"</strong>?
        </p>
        <p className="mt-2 text-xs text-gray-400">This action cannot be undone.</p>
      </Modal>
    </div>
  );
}

export default ChatUI;
